@page "/clientaddata"
@using Data.Models;
@using Logic.StaticResources;
@using Microsoft.AspNetCore.Components;
@using ModellenBureauBlazorVersion3.Client.DataServices;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using System.IO
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReader
@inject HttpClient client
<section class="employee-edit">
    <h1 class="page-title">Edit</h1>
    <EditForm Model="loggedinclient" OnValidSubmit="EditClient">
        <div class="form-group row">
            <label class="col-sm-3">Username </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.UserName"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.UserName)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Password </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.Password"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.Password)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">KVK number </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.KVKNumber"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.KVKNumber)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">BTW number </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.BTWNumber"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.BTWNumber)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Age </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.Age"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.Age)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">City </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.City"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.City)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">email adress </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.EmailAdress"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.EmailAdress)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">First name </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.FirstName"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.FirstName)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Last name </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.LastName"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.LastName)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Postal code </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.PostalCode"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.PostalCode)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Street name </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.StreetName"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.StreetName)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Street number </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.StreetNumber"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.StreetNumber)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Telephone number </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@loggedinclient.data.TelephoneNumber"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => loggedinclient.data.TelephoneNumber)" />
        </div>
        <div class="form-group">
            <label class="col-sm-3"> Image </label>
            <input type="file" @ref="inputReference" @onchange="async () => await OpenFileAsync()" />
        </div>
        <button type="submit" class="btn btn-primary edit-btn">Save changes</button>
    </EditForm>

</section>
@code {
    ElementReference inputReference;
    string message = string.Empty;
    string imagePath = null;

    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;

    Stream fileStream = null;

    async Task OpenFileAsync()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null)
            return;
        var fileinfo = await file.ReadFileInfoAsync();
        fileName = fileinfo.Name;
        size = $"{fileinfo.Size}b";
        type = fileinfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileinfo.Size))
        {
            fileStream = ms;
        }

    }

    [Inject]
    public IAdminDataService _adminDataService { get; set; }
    [Inject]
    public IClientDataService _clientDataService { get; set; }
    [Inject]
    public IEventDataService _eventDataService { get; set; }
    [Inject]
    public IFemaleModelDataService _femaleModelDataService { get; set; }
    [Inject]
    public IMaleModelDataService _maleModelDataService { get; set; }

    public ClientModel loggedinclient { get; set; }

    [Inject]
    public NavigationManager navmanager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (GeneralStaticdata.currentclientmodel != null)
        {
            loggedinclient = GeneralStaticdata.currentclientmodel;
        }
        else
        {
            navmanager.NavigateTo("/");
        }

    }

    public async void EditClient()
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");

        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);
        var response = await client.PostAsync("https://localhost:44393/api/imageupload", content);
        await _clientDataService.UpdateClientModel(loggedinclient);
        navmanager.NavigateTo("/clientmainpage");
    }
}
